name: Build C++ Project in Docker

on:
  push:
    branches: [ dispatch ]
  pull_request:
    branches: [ dispatch ]

jobs:
  build:
    name: Build with Docker on Self-hosted Runner
    runs-on: self-hosted
    environment: dev
    steps:
      - name: Generate timestamp
        id: gen_time
        run: echo "ts=$(date +'%Y%m%d_%H%M%S')" >> "$GITHUB_OUTPUT"
      - name: Checkout repository to dynamic path
        uses: actions/checkout@v4
        with:
          path: my-code-${{ steps.gen_time.outputs.ts }}
      - name: Build inside Docker and output artifact
        run: |
          export SRC_DIR="${GITHUB_WORKSPACE}/my-code-${{ steps.gen_time.outputs.ts }}"
          export OUTPUT_DIR=${{ vars.OUTPUT_DIR }}/A/build
          mkdir -p "${OUTPUT_DIR}"        
          mkdir -p "${SRC_DIR}/build"        
          docker run --rm \
            -v "${SRC_DIR}:/workspace" \
            -v "${OUTPUT_DIR}:/output" \
            -w	/workspace \
            --entrypoint bash davidwu-base-gcc:1.0  -c "
              cd build &&
              cmake .. &&
              cmake --build . &&
              cmake --install . &&
              cp ./casino_game /output &&
              chmod -R 777 /output/* &&
              echo done"
      - name: Trigger Repo C repository_dispatch event
        uses: peter-evans/repository-dispatch@v2 # 使用一个现成的 action 来发送 dispatch 事件
        with: 
          token: ${{ secrets.REPO_C_DISPATCH_TOKEN }} 
          # 指定目标仓库 (格式: owner/repo_name)
          # 将 YOUR_REPO_B_OWNER 和 YOUR_REPO_B_NAME 替换为仓库 B 的实际所有者和仓库名
          repository: Darrenzzy/casino-C
          # 定义一个事件类型，仓库 B 可以根据这个类型来过滤
          event-type: triggered-by-repo-a-update
          # (可选) 发送一个 payload，可以在仓库 B 的 workflow 中访问这些信息
          # 例如，可以发送仓库 A 的 commit SHA 或分支信息
          client-payload: |
            {
              "ref": "${{ github.ref }}",
              "sha": "${{ github.sha }}",
              "triggered_by_repo": "${{ github.repository }}"
            }
      - name: Clean up work directory
        run: |
          export SRC_DIR="${GITHUB_WORKSPACE}/my-code-${{ steps.gen_time.outputs.ts }}"
          ls "${SRC_DIR}/build"  # 清理工作目录
          # rm -rf ${SRC_DIR}/build/*  # 清理工作目录
